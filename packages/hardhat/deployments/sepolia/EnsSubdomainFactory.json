{
  "address": "0xA6907920f08cB32776B89A866dC217b54114ec7A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DomainTransfersLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousRegistry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRegistry",
          "type": "address"
        }
      ],
      "name": "RegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousResolver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newResolver",
          "type": "address"
        }
      ],
      "name": "ResolverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "subdomain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "topdomain",
          "type": "string"
        }
      ],
      "name": "SubdomainCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_topdomain",
          "type": "string"
        }
      ],
      "name": "domainOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDomainOwnershipTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_subdomain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_topdomain",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "newSubdomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract EnsRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract EnsResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolverAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_subdomain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_topdomain",
          "type": "string"
        }
      ],
      "name": "subdomainOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_subdomain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_topdomain",
          "type": "string"
        }
      ],
      "name": "subdomainTarget",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "transferContractOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "transferDomainOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "updateRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "updateResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x428b5c18f695622b64f0548dcc8afc6fad46862741ddd9e461fb548cf41c3911",
  "receipt": {
    "to": null,
    "from": "0x93f222120dB78772730b62BFB12225995e0b5DEe",
    "contractAddress": "0xA6907920f08cB32776B89A866dC217b54114ec7A",
    "transactionIndex": 65,
    "gasUsed": "1378979",
    "logsBloom": "0x
    "blockHash": "0x489d83c748ba398b07758cc03a68204034f640f356e8c453151c0f8812f5e5d7",
    "transactionHash": "0x428b5c18f695622b64f0548dcc8afc6fad46862741ddd9e461fb548cf41c3911",
    "logs": [],
    "blockNumber": 5301437,
    "cumulativeGasUsed": "11787221",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93f222120dB78772730b62BFB12225995e0b5DEe",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x8FADE66B79cC9f707aB26799354482EB93a5B7dD"
  ],
  "numDeployments": 5,
  "solcInputHash": "e57520b074255b6af299d607c91a14be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DomainTransfersLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousResolver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"ResolverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"topdomain\",\"type\":\"string\"}],\"name\":\"SubdomainCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_topdomain\",\"type\":\"string\"}],\"name\":\"domainOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDomainOwnershipTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_subdomain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_topdomain\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"newSubdomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract EnsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract EnsResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_subdomain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_topdomain\",\"type\":\"string\"}],\"name\":\"subdomainOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_subdomain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_topdomain\",\"type\":\"string\"}],\"name\":\"subdomainTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferDomainOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"updateResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows to create and configure a subdomain for Ethereum ENS in one call. After deploying this contract, change the owner of the domain you want to use to this deployed contract address. For example, transfer the ownership of \\\"startonchain.eth\\\" so anyone can create subdomains like \\\"radek.startonchain.eth\\\".\",\"kind\":\"dev\",\"methods\":{\"domainOwner(string,string)\":{\"details\":\"Returns the owner of a domain (e.g. \\\"startonchain.eth\\\"),\",\"params\":{\"_domain\":\"- domain name e.g. \\\"startonchain\\\"\",\"_topdomain\":\"- parent domain name e.g. \\\"eth\\\" or \\\"xyz\\\"\"}},\"lockDomainOwnershipTransfers()\":{\"details\":\"The contract owner can lock and prevent any future domain ownership transfers.\"},\"newSubdomain(string,string,string,address,address)\":{\"details\":\"Allows to create a subdomain (e.g. \\\"radek.startonchain.eth\\\"), set its resolver and set its target address\",\"params\":{\"_domain\":\"- domain name e.g. \\\"startonchain\\\"\",\"_owner\":\"- address that will become owner of this new subdomain\",\"_subdomain\":\"- sub domain name only e.g. \\\"radek\\\"\",\"_target\":\"- address that this new domain will resolve to\",\"_topdomain\":\"- parent domain name e.g. \\\"eth\\\", \\\"xyz\\\"\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"subdomainOwner(string,string,string)\":{\"details\":\"Return the owner of a subdomain (e.g. \\\"radek.startonchain.eth\\\"),\",\"params\":{\"_domain\":\"- parent domain name e.g. \\\"startonchain\\\"\",\"_subdomain\":\"- sub domain name only e.g. \\\"radek\\\"\",\"_topdomain\":\"- parent domain name e.g. \\\"eth\\\", \\\"xyz\\\"\"}},\"subdomainTarget(string,string,string)\":{\"details\":\"Return the target address where the subdomain is pointing to (e.g. \\\"0x12345...\\\"),\",\"params\":{\"_domain\":\"- parent domain name e.g. \\\"startonchain\\\"\",\"_subdomain\":\"- sub domain name only e.g. \\\"radek\\\"\",\"_topdomain\":\"- parent domain name e.g. \\\"eth\\\", \\\"xyz\\\"\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferContractOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a new owner.\",\"params\":{\"_owner\":\"The address to transfer ownership to.\"}},\"transferDomainOwnership(bytes32,address)\":{\"details\":\"The contract owner can take away the ownership of any domain owned by this contract.\",\"params\":{\"_node\":\"- namehash of the domain\",\"_owner\":\"- new owner for the domain\"}},\"updateRegistry(address)\":{\"details\":\"Allows to update to new ENS registry.\",\"params\":{\"_registry\":\"The address of new ENS registry to use.\"}},\"updateResolver(address)\":{\"details\":\"Allows to update to new ENS resolver.\",\"params\":{\"_resolver\":\"The address of new ENS resolver to use.\"}}},\"title\":\"EnsSubdomainFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnsSubdomainFactory.sol\":\"EnsSubdomainFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/EnsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * @title EnsRegistry\\n * @dev Extract of the interface for ENS Registry\\n */\\ninterface EnsRegistry {\\n\\tfunction setOwner(bytes32 node, address owner) external;\\n\\n\\tfunction setSubnodeOwner(\\n\\t\\tbytes32 node,\\n\\t\\tbytes32 label,\\n\\t\\taddress owner\\n\\t) external;\\n\\n\\tfunction setResolver(bytes32 node, address resolver) external;\\n\\n\\tfunction owner(bytes32 node) external view returns (address);\\n\\n\\tfunction resolver(bytes32 node) external view returns (address);\\n}\\n\",\"keccak256\":\"0x761f69432914566fd703cc90910f0b0d82a6c7ece26520a09e856a6317b5b084\",\"license\":\"MIT\"},\"contracts/EnsResolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title EnsResolver\\n * @dev Extract of the interface for ENS Resolver\\n */\\ninterface EnsResolver {\\n\\tfunction setAddr(bytes32 node, address addr) external;\\n\\n\\tfunction addr(bytes32 node) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2a278ac4b8346eabb5028c9047b624f4590717813f5e9cd6bce85ad101736d8\"},\"contracts/EnsSubdomainFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./EnsRegistry.sol\\\";\\nimport \\\"./EnsResolver.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\n/**\\n * @title EnsSubdomainFactory\\n * @dev Allows to create and configure a subdomain for Ethereum ENS in one call.\\n * After deploying this contract, change the owner of the domain you want to use\\n * to this deployed contract address. For example, transfer the ownership of \\\"startonchain.eth\\\"\\n * so anyone can create subdomains like \\\"radek.startonchain.eth\\\".\\n */\\ncontract EnsSubdomainFactory is ERC1155Holder, ERC721Holder {\\n\\taddress public owner;\\n\\taddress public registryAddress;\\n\\taddress public resolverAddress;\\n\\tEnsRegistry public registry;\\n\\tEnsResolver public resolver;\\n\\tbool public locked;\\n\\tbytes32 emptyNamehash = 0x00;\\n\\n\\tevent SubdomainCreated(\\n\\t\\taddress indexed creator,\\n\\t\\taddress indexed owner,\\n\\t\\tstring subdomain,\\n\\t\\tstring domain,\\n\\t\\tstring topdomain\\n\\t);\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\tevent RegistryUpdated(\\n\\t\\taddress indexed previousRegistry,\\n\\t\\taddress indexed newRegistry\\n\\t);\\n\\tevent ResolverUpdated(\\n\\t\\taddress indexed previousResolver,\\n\\t\\taddress indexed newResolver\\n\\t);\\n\\tevent DomainTransfersLocked();\\n\\n\\tconstructor(address _owner, address _registry, address _resolver) {\\n\\t\\towner = _owner;\\n\\t\\tregistry = EnsRegistry(_registry);\\n\\t\\tresolver = EnsResolver(_resolver);\\n\\t\\tregistryAddress = _registry;\\n\\t\\tresolverAddress = _resolver;\\n\\t\\tlocked = false;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t *\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows to create a subdomain (e.g. \\\"radek.startonchain.eth\\\"),\\n\\t * set its resolver and set its target address\\n\\t * @param _subdomain - sub domain name only e.g. \\\"radek\\\"\\n\\t * @param _domain - domain name e.g. \\\"startonchain\\\"\\n\\t * @param _topdomain - parent domain name e.g. \\\"eth\\\", \\\"xyz\\\"\\n\\t * @param _owner - address that will become owner of this new subdomain\\n\\t * @param _target - address that this new domain will resolve to\\n\\t */\\n\\tfunction newSubdomain(\\n\\t\\tstring calldata _subdomain,\\n\\t\\tstring calldata _domain,\\n\\t\\tstring calldata _topdomain,\\n\\t\\taddress _owner,\\n\\t\\taddress _target\\n\\t) public {\\n\\t\\t//create namehash for the topdomain\\n\\t\\tbytes32 topdomainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\temptyNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_topdomain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\t//create namehash for the domain\\n\\t\\tbytes32 domainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\ttopdomainNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_domain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\t//create labelhash for the sub domain\\n\\t\\tbytes32 subdomainLabelhash = keccak256(abi.encodePacked(_subdomain));\\n\\t\\t//create namehash for the sub domain\\n\\t\\tbytes32 subdomainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(domainNamehash, subdomainLabelhash)\\n\\t\\t);\\n\\n\\t\\t//create new subdomain, temporarily this smartcontract is the owner\\n\\t\\tregistry.setSubnodeOwner(\\n\\t\\t\\tdomainNamehash,\\n\\t\\t\\tsubdomainLabelhash,\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\t//set public resolver for this domain\\n\\t\\tregistry.setResolver(subdomainNamehash, resolverAddress);\\n\\t\\t//set the destination address\\n\\t\\tresolver.setAddr(subdomainNamehash, _target);\\n\\t\\t//change the ownership back to requested owner\\n\\t\\tregistry.setOwner(subdomainNamehash, _owner);\\n\\n\\t\\temit SubdomainCreated(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_owner,\\n\\t\\t\\t_subdomain,\\n\\t\\t\\t_domain,\\n\\t\\t\\t_topdomain\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the owner of a domain (e.g. \\\"startonchain.eth\\\"),\\n\\t * @param _domain - domain name e.g. \\\"startonchain\\\"\\n\\t * @param _topdomain - parent domain name e.g. \\\"eth\\\" or \\\"xyz\\\"\\n\\t */\\n\\tfunction domainOwner(\\n\\t\\tstring calldata _domain,\\n\\t\\tstring calldata _topdomain\\n\\t) public view returns (address) {\\n\\t\\tbytes32 topdomainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\temptyNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_topdomain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tbytes32 namehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\ttopdomainNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_domain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn registry.owner(namehash);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Return the owner of a subdomain (e.g. \\\"radek.startonchain.eth\\\"),\\n\\t * @param _subdomain - sub domain name only e.g. \\\"radek\\\"\\n\\t * @param _domain - parent domain name e.g. \\\"startonchain\\\"\\n\\t * @param _topdomain - parent domain name e.g. \\\"eth\\\", \\\"xyz\\\"\\n\\t */\\n\\tfunction subdomainOwner(\\n\\t\\tstring calldata _subdomain,\\n\\t\\tstring calldata _domain,\\n\\t\\tstring calldata _topdomain\\n\\t) public view returns (address) {\\n\\t\\tbytes32 topdomainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\temptyNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_topdomain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tbytes32 domainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\ttopdomainNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_domain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tbytes32 subdomainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tdomainNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_subdomain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn registry.owner(subdomainNamehash);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Return the target address where the subdomain is pointing to (e.g. \\\"0x12345...\\\"),\\n\\t * @param _subdomain - sub domain name only e.g. \\\"radek\\\"\\n\\t * @param _domain - parent domain name e.g. \\\"startonchain\\\"\\n\\t * @param _topdomain - parent domain name e.g. \\\"eth\\\", \\\"xyz\\\"\\n\\t */\\n\\tfunction subdomainTarget(\\n\\t\\tstring calldata _subdomain,\\n\\t\\tstring calldata _domain,\\n\\t\\tstring calldata _topdomain\\n\\t) public view returns (address) {\\n\\t\\tbytes32 topdomainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\temptyNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_topdomain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tbytes32 domainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\ttopdomainNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_domain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tbytes32 subdomainNamehash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tdomainNamehash,\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_subdomain))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\taddress currentResolver = registry.resolver(subdomainNamehash);\\n\\t\\treturn EnsResolver(currentResolver).addr(subdomainNamehash);\\n\\t}\\n\\n\\t/**\\n\\t * @dev The contract owner can take away the ownership of any domain owned by this contract.\\n\\t * @param _node - namehash of the domain\\n\\t * @param _owner - new owner for the domain\\n\\t */\\n\\tfunction transferDomainOwnership(\\n\\t\\tbytes32 _node,\\n\\t\\taddress _owner\\n\\t) public onlyOwner {\\n\\t\\trequire(!locked);\\n\\t\\tregistry.setOwner(_node, _owner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev The contract owner can lock and prevent any future domain ownership transfers.\\n\\t */\\n\\tfunction lockDomainOwnershipTransfers() public onlyOwner {\\n\\t\\trequire(!locked);\\n\\t\\tlocked = true;\\n\\t\\temit DomainTransfersLocked();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows to update to new ENS registry.\\n\\t * @param _registry The address of new ENS registry to use.\\n\\t */\\n\\tfunction updateRegistry(address _registry) public onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tregistryAddress != _registry,\\n\\t\\t\\t\\\"new registry should be different from old\\\"\\n\\t\\t);\\n\\t\\temit RegistryUpdated(registryAddress, _registry);\\n\\t\\tregistry = EnsRegistry(_registry);\\n\\t\\tregistryAddress = _registry;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows to update to new ENS resolver.\\n\\t * @param _resolver The address of new ENS resolver to use.\\n\\t */\\n\\tfunction updateResolver(address _resolver) public onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tresolverAddress != _resolver,\\n\\t\\t\\t\\\"new resolver should be different from old\\\"\\n\\t\\t);\\n\\t\\temit ResolverUpdated(resolverAddress, _resolver);\\n\\t\\tresolver = EnsResolver(_resolver);\\n\\t\\tresolverAddress = _resolver;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows the current owner to transfer control of the contract to a new owner.\\n\\t * @param _owner The address to transfer ownership to.\\n\\t */\\n\\tfunction transferContractOwnership(address _owner) public onlyOwner {\\n\\t\\trequire(_owner != address(0), \\\"cannot transfer to address(0)\\\");\\n\\t\\temit OwnershipTransferred(owner, _owner);\\n\\t\\towner = _owner;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x501353a7bd790b8dc9204ad1f62dd1a69bb26253307fe42f5e92d773fb0ebfac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006005553480156200001657600080fd5b50604051620016eb380380620016eb8339810160408190526200003991620000b8565b600080546001600160a01b039485166001600160a01b031991821617909155600380549385169382168417905560048054600180548416909517909455600280549092169290941691821790556001600160a81b031990911617905562000102565b80516001600160a01b0381168114620000b357600080fd5b919050565b600080600060608486031215620000ce57600080fd5b620000d9846200009b565b9250620000e9602085016200009b565b9150620000f9604085016200009b565b90509250925092565b6115d980620001126000396000f3fe6080604052600436106101185760003560e01c80637dd45999116100a0578063beea7bfb11610064578063beea7bfb14610338578063cf30901214610358578063e6fe39ed14610379578063ed9aab5114610399578063f23a6e61146103b957600080fd5b80637dd45999146102975780638da5cb5b146102ac578063a843c51f146102cc578063b1db5bec146102ec578063bc197c811461030c57600080fd5b80631a5da6c8116100e75780631a5da6c8146101f55780631dc9a3b91461021757806357014fee1461023757806366167663146102575780637b1039991461027757600080fd5b806301ffc9a71461012457806304f3bcec146101595780630ab4c06514610191578063150b7a02146101b157600080fd5b3661011f57005b600080fd5b34801561013057600080fd5b5061014461013f366004610fb0565b6103e5565b60405190151581526020015b60405180910390f35b34801561016557600080fd5b50600454610179906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b34801561019d57600080fd5b506101796101ac36600461102a565b61041c565b3480156101bd57600080fd5b506101dc6101cc366004611193565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610150565b34801561020157600080fd5b506102156102103660046111ff565b6105b3565b005b34801561022357600080fd5b5061021561023236600461121c565b6106a4565b34801561024357600080fd5b5061017961025236600461124c565b61073c565b34801561026357600080fd5b5061017961027236600461102a565b610872565b34801561028357600080fd5b50600354610179906001600160a01b031681565b3480156102a357600080fd5b50610215610a7b565b3480156102b857600080fd5b50600054610179906001600160a01b031681565b3480156102d857600080fd5b506102156102e73660046111ff565b610ae7565b3480156102f857600080fd5b50600254610179906001600160a01b031681565b34801561031857600080fd5b506101dc61032736600461132d565b63bc197c8160e01b95945050505050565b34801561034457600080fd5b506102156103533660046113db565b610baf565b34801561036457600080fd5b5060045461014490600160a01b900460ff1681565b34801561038557600080fd5b506102156103943660046111ff565b610ec4565b3480156103a557600080fd5b50600154610179906001600160a01b031681565b3480156103c557600080fd5b506101dc6103d436600461149b565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061041657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806005548484604051602001610435929190611504565b60405160208183030381529060405280519060200120604051602001610465929190918252602082015260400190565b6040516020818303038152906040528051906020012090506000818787604051602001610493929190611504565b604051602081830303815290604052805190602001206040516020016104c3929190918252602082015260400190565b6040516020818303038152906040528051906020012090506000818a8a6040516020016104f1929190611504565b60405160208183030381529060405280519060200120604051602001610521929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206003546302571be360e01b8352600483018290529092506001600160a01b0316906302571be390602401602060405180830381865afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190611514565b9a9950505050505050505050565b6000546001600160a01b031633146105ca57600080fd5b6001546001600160a01b0380831691160361063e5760405162461bcd60e51b815260206004820152602960248201527f6e65772072656769737472792073686f756c6420626520646966666572656e7460448201526808199c9bdb481bdb1960ba1b60648201526084015b60405180910390fd5b6001546040516001600160a01b038084169216907f482b97c53e48ffa324a976e2738053e9aff6eee04d8aac63b10e19411d869b8290600090a3600380546001600160a01b039092166001600160a01b0319928316811790915560018054909216179055565b6000546001600160a01b031633146106bb57600080fd5b600454600160a01b900460ff16156106d257600080fd5b600354604051635b0fc9c360e01b8152600481018490526001600160a01b03838116602483015290911690635b0fc9c390604401600060405180830381600087803b15801561072057600080fd5b505af1158015610734573d6000803e3d6000fd5b505050505050565b6000806005548484604051602001610755929190611504565b60405160208183030381529060405280519060200120604051602001610785929190918252602082015260400190565b60405160208183030381529060405280519060200120905060008187876040516020016107b3929190611504565b604051602081830303815290604052805190602001206040516020016107e3929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206003546302571be360e01b8352600483018290529092506001600160a01b0316906302571be390602401602060405180830381865afa158015610843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108679190611514565b979650505050505050565b600080600554848460405160200161088b929190611504565b604051602081830303815290604052805190602001206040516020016108bb929190918252602082015260400190565b60405160208183030381529060405280519060200120905060008187876040516020016108e9929190611504565b60405160208183030381529060405280519060200120604051602001610919929190918252602082015260400190565b6040516020818303038152906040528051906020012090506000818a8a604051602001610947929190611504565b60405160208183030381529060405280519060200120604051602001610977929190918252602082015260400190565b60408051808303601f19018152908290528051602090910120600354630178b8bf60e01b8352600483018290529092506000916001600160a01b0390911690630178b8bf90602401602060405180830381865afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a009190611514565b604051631d9dabef60e11b8152600481018490529091506001600160a01b03821690633b3b57de90602401602060405180830381865afa158015610a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6c9190611514565b9b9a5050505050505050505050565b6000546001600160a01b03163314610a9257600080fd5b600454600160a01b900460ff1615610aa957600080fd5b6004805460ff60a01b1916600160a01b1790556040517fd68bbea4b8d77ea0826a260170e3b50080b57c9ed7420ef5920b1a58e613e17990600090a1565b6000546001600160a01b03163314610afe57600080fd5b6001600160a01b038116610b545760405162461bcd60e51b815260206004820152601d60248201527f63616e6e6f74207472616e7366657220746f20616464726573732830290000006044820152606401610635565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006005548585604051602001610bc7929190611504565b60405160208183030381529060405280519060200120604051602001610bf7929190918252602082015260400190565b6040516020818303038152906040528051906020012090506000818888604051602001610c25929190611504565b60405160208183030381529060405280519060200120604051602001610c55929190918252602082015260400190565b60405160208183030381529060405280519060200120905060008a8a604051602001610c82929190611504565b60408051601f198184030181528282528051602091820120908301859052908201819052915060009060600160408051808303601f190181529082905280516020909101206003546306ab592360e01b835260048301869052602483018590523060448401529092506001600160a01b0316906306ab592390606401600060405180830381600087803b158015610d1857600080fd5b505af1158015610d2c573d6000803e3d6000fd5b5050600354600254604051630c4b7b8560e11b8152600481018690526001600160a01b03918216602482015291169250631896f70a9150604401600060405180830381600087803b158015610d8057600080fd5b505af1158015610d94573d6000803e3d6000fd5b50506004805460405162d5fa2b60e81b81529182018590526001600160a01b03898116602484015216925063d5fa2b009150604401600060405180830381600087803b158015610de357600080fd5b505af1158015610df7573d6000803e3d6000fd5b5050600354604051635b0fc9c360e01b8152600481018590526001600160a01b038a811660248301529091169250635b0fc9c39150604401600060405180830381600087803b158015610e4957600080fd5b505af1158015610e5d573d6000803e3d6000fd5b50505050856001600160a01b0316336001600160a01b03167fbe172d0b7345b08856a54d791662df9f820be68a2a278f0ef50955f491eacde98e8e8e8e8e8e604051610eae9695949392919061155a565b60405180910390a3505050505050505050505050565b6000546001600160a01b03163314610edb57600080fd5b6002546001600160a01b03808316911603610f4a5760405162461bcd60e51b815260206004820152602960248201527f6e6577207265736f6c7665722073686f756c6420626520646966666572656e7460448201526808199c9bdb481bdb1960ba1b6064820152608401610635565b6002546040516001600160a01b038084169216907f84b83d2b66cac119ccaaca68b476b0dc5371d5f2fd27f697770a910175fd38b690600090a3600480546001600160a01b039092166001600160a01b0319928316811790915560028054909216179055565b600060208284031215610fc257600080fd5b81356001600160e01b031981168114610fda57600080fd5b9392505050565b60008083601f840112610ff357600080fd5b50813567ffffffffffffffff81111561100b57600080fd5b60208301915083602082850101111561102357600080fd5b9250929050565b6000806000806000806060878903121561104357600080fd5b863567ffffffffffffffff8082111561105b57600080fd5b6110678a838b01610fe1565b9098509650602089013591508082111561108057600080fd5b61108c8a838b01610fe1565b909650945060408901359150808211156110a557600080fd5b506110b289828a01610fe1565b979a9699509497509295939492505050565b6001600160a01b03811681146110d957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561111b5761111b6110dc565b604052919050565b600082601f83011261113457600080fd5b813567ffffffffffffffff81111561114e5761114e6110dc565b611161601f8201601f19166020016110f2565b81815284602083860101111561117657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156111a957600080fd5b84356111b4816110c4565b935060208501356111c4816110c4565b925060408501359150606085013567ffffffffffffffff8111156111e757600080fd5b6111f387828801611123565b91505092959194509250565b60006020828403121561121157600080fd5b8135610fda816110c4565b6000806040838503121561122f57600080fd5b823591506020830135611241816110c4565b809150509250929050565b6000806000806040858703121561126257600080fd5b843567ffffffffffffffff8082111561127a57600080fd5b61128688838901610fe1565b9096509450602087013591508082111561129f57600080fd5b506112ac87828801610fe1565b95989497509550505050565b600082601f8301126112c957600080fd5b8135602067ffffffffffffffff8211156112e5576112e56110dc565b8160051b6112f48282016110f2565b928352848101820192828101908785111561130e57600080fd5b83870192505b8483101561086757823582529183019190830190611314565b600080600080600060a0868803121561134557600080fd5b8535611350816110c4565b94506020860135611360816110c4565b9350604086013567ffffffffffffffff8082111561137d57600080fd5b61138989838a016112b8565b9450606088013591508082111561139f57600080fd5b6113ab89838a016112b8565b935060808801359150808211156113c157600080fd5b506113ce88828901611123565b9150509295509295909350565b60008060008060008060008060a0898b0312156113f757600080fd5b883567ffffffffffffffff8082111561140f57600080fd5b61141b8c838d01610fe1565b909a50985060208b013591508082111561143457600080fd5b6114408c838d01610fe1565b909850965060408b013591508082111561145957600080fd5b506114668b828c01610fe1565b909550935050606089013561147a816110c4565b9150608089013561148a816110c4565b809150509295985092959890939650565b600080600080600060a086880312156114b357600080fd5b85356114be816110c4565b945060208601356114ce816110c4565b93506040860135925060608601359150608086013567ffffffffffffffff8111156114f857600080fd5b6113ce88828901611123565b8183823760009101908152919050565b60006020828403121561152657600080fd5b8151610fda816110c4565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061156e60608301888a611531565b8281036020840152611581818789611531565b90508281036040840152611596818587611531565b999850505050505050505056fea26469706673582212202861471adfdb182b0edbc562f90237aa3684193ec0d2398fe245df09fa71153664736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Allows to create and configure a subdomain for Ethereum ENS in one call. After deploying this contract, change the owner of the domain you want to use to this deployed contract address. For example, transfer the ownership of \"startonchain.eth\" so anyone can create subdomains like \"radek.startonchain.eth\".",
    "kind": "dev",
    "methods": {
      "domainOwner(string,string)": {
        "details": "Returns the owner of a domain (e.g. \"startonchain.eth\"),",
        "params": {
          "_domain": "- domain name e.g. \"startonchain\"",
          "_topdomain": "- parent domain name e.g. \"eth\" or \"xyz\""
        }
      },
      "lockDomainOwnershipTransfers()": {
        "details": "The contract owner can lock and prevent any future domain ownership transfers."
      },
      "newSubdomain(string,string,string,address,address)": {
        "details": "Allows to create a subdomain (e.g. \"radek.startonchain.eth\"), set its resolver and set its target address",
        "params": {
          "_domain": "- domain name e.g. \"startonchain\"",
          "_owner": "- address that will become owner of this new subdomain",
          "_subdomain": "- sub domain name only e.g. \"radek\"",
          "_target": "- address that this new domain will resolve to",
          "_topdomain": "- parent domain name e.g. \"eth\", \"xyz\""
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "subdomainOwner(string,string,string)": {
        "details": "Return the owner of a subdomain (e.g. \"radek.startonchain.eth\"),",
        "params": {
          "_domain": "- parent domain name e.g. \"startonchain\"",
          "_subdomain": "- sub domain name only e.g. \"radek\"",
          "_topdomain": "- parent domain name e.g. \"eth\", \"xyz\""
        }
      },
      "subdomainTarget(string,string,string)": {
        "details": "Return the target address where the subdomain is pointing to (e.g. \"0x12345...\"),",
        "params": {
          "_domain": "- parent domain name e.g. \"startonchain\"",
          "_subdomain": "- sub domain name only e.g. \"radek\"",
          "_topdomain": "- parent domain name e.g. \"eth\", \"xyz\""
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferContractOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a new owner.",
        "params": {
          "_owner": "The address to transfer ownership to."
        }
      },
      "transferDomainOwnership(bytes32,address)": {
        "details": "The contract owner can take away the ownership of any domain owned by this contract.",
        "params": {
          "_node": "- namehash of the domain",
          "_owner": "- new owner for the domain"
        }
      },
      "updateRegistry(address)": {
        "details": "Allows to update to new ENS registry.",
        "params": {
          "_registry": "The address of new ENS registry to use."
        }
      },
      "updateResolver(address)": {
        "details": "Allows to update to new ENS resolver.",
        "params": {
          "_resolver": "The address of new ENS resolver to use."
        }
      }
    },
    "title": "EnsSubdomainFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 278,
        "contract": "contracts/EnsSubdomainFactory.sol:EnsSubdomainFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 280,
        "contract": "contracts/EnsSubdomainFactory.sol:EnsSubdomainFactory",
        "label": "registryAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 282,
        "contract": "contracts/EnsSubdomainFactory.sol:EnsSubdomainFactory",
        "label": "resolverAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 285,
        "contract": "contracts/EnsSubdomainFactory.sol:EnsSubdomainFactory",
        "label": "registry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(EnsRegistry)247"
      },
      {
        "astId": 288,
        "contract": "contracts/EnsSubdomainFactory.sol:EnsSubdomainFactory",
        "label": "resolver",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(EnsResolver)265"
      },
      {
        "astId": 290,
        "contract": "contracts/EnsSubdomainFactory.sol:EnsSubdomainFactory",
        "label": "locked",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 293,
        "contract": "contracts/EnsSubdomainFactory.sol:EnsSubdomainFactory",
        "label": "emptyNamehash",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(EnsRegistry)247": {
        "encoding": "inplace",
        "label": "contract EnsRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(EnsResolver)265": {
        "encoding": "inplace",
        "label": "contract EnsResolver",
        "numberOfBytes": "20"
      }
    }
  }
}